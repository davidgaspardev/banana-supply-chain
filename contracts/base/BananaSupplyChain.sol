// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "../core/Ownable.sol";
import "../accesscontrol/ConsumerRole.sol";
import "../accesscontrol/DistributorRole.sol";
import "../accesscontrol/FarmerRole.sol";
import "../accesscontrol/RetailerRole.sol";

// Define a contract 'Supplychain'
contract BananaSupplyChain is 
    Ownable,
    ConsumerRole,
    DistributorRole,
    FarmerRole,
    RetailerRole
{

  uint  upc;
  uint  sku;

  mapping (uint => Banana) bananas;

  // Define a public mapping 'bananasHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  // mapping (uint => string[]) bananasHistory;
  
  enum BananaState 
  {
    Harvested,  // 0
    Processed,  // 1
    Boxed,      // 2
    BoxForSale, // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Unboxed,    // 7
    ForSale,    // 8
    Purchased   // 9
  }
  BananaState constant defaultState = BananaState.Harvested;

  struct Banana {
    uint        sku;                   // Stock Keeping Unit (SKU)
    uint        upc;                   // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address     ownerID;               // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address     originFarmerID;        // Metamask-Ethereum address of the Farmer
    string      originFarmName;        // Farmer Name
    string      originFarmInformation; // Farmer Information
    string      originFarmLatitude;    // Farm Latitude
    string      originFarmLongitude;   // Farm Longitude
    uint        productID;             // Product ID potentially a combination of upc + sku
    string      productNotes;          // Product Notes
    uint        productPrice;          // Product Price
    address     distributorID;         // Metamask-Ethereum address of the Distributor
    address     retailerID;            // Metamask-Ethereum address of the Retailer
    address     consumerID;            // Metamask-Ethereum address of the Consumer
    BananaState state;                 // Product State as represented in the enum above
  }

  event Harvested(uint upc);
  event Processed(uint upc);
  event Boxed(uint upc);
  event BoxForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Unboxed(uint upc);
  event ForSale(uint upc);
  event Purchased(uint upc);

  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "[ verifyCaller ] Caller not allowed"); 
    _;
  }

  modifier paidEnough(uint _price) { 
    require(msg.value >= _price, "[ paidEnough ] Insufficient funds"); 
    _;
  }
  
  modifier checkValue(uint _upc) {
    _;
    uint _price = bananas[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    payable(bananas[_upc].consumerID).transfer(amountToReturn);
  }

  modifier checkValueDistributor(uint _upc) {
    _;
    uint _price = bananas[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    payable(bananas[_upc].distributorID).transfer(amountToReturn);
  }

  modifier harvested(uint _upc) {
    require(bananas[_upc].state == BananaState.Harvested, "[ harvested ] Banana isn't harvested");
    _;
  }

  modifier processed(uint _upc) {
    require(bananas[_upc].state == BananaState.Processed, "[ processed ] Banana isn't processed");
    _;
  }
  
  modifier boxed(uint _upc) {
    require(bananas[_upc].state == BananaState.Boxed, "[ boxed ] Banana isn't boxed");
    _;
  }

  modifier boxForSale(uint _upc) {
    require(bananas[_upc].state == BananaState.BoxForSale, "[ boxForSale ] Banana isn't boxForSale");
    _;
  }

  modifier sold(uint _upc) {
    require(bananas[_upc].state == BananaState.Sold, "[ sold ] Banana isn't sold");
    _;
  }
  
  modifier shipped(uint _upc) {
    require(bananas[_upc].state == BananaState.Shipped, "[ shipped ] Banana isn't shipped");
    _;
  }

  modifier received(uint _upc) {
    require(bananas[_upc].state == BananaState.Received, "[ received ] Banana isn't received");
    _;
  }

  modifier unboxed(uint _upc) {
    require(bananas[_upc].state == BananaState.Unboxed, "[ unboxed ] Banana isn't unboxed");
    _;
  }

  modifier forSale(uint _upc) {
    require(bananas[_upc].state == BananaState.ForSale, "[ forSale ] Banana isn't forSale");
    _;
  }

  modifier purchased(uint _upc) {
    require(bananas[_upc].state == BananaState.Purchased, "[ purchased ] Banana isn't purchased");
    _;
  }

  constructor() public payable {
    sku = 1;
    upc = 1;
  }

  function kill() public onlyOwner {
    if (msg.sender == owner()) {
      selfdestruct(payable(owner()));
    }
  }

  /* ======================= ACTION FUNCTIONS ======================= */

  function harvestBanana(
    uint    _upc,
    address _originFarmerID,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originFarmLatitude,
    string memory  _originFarmLongitude,
    uint _productID,
    string memory _productNotes
  )
    public
    onlyFarmer
  {
    bananas[_upc].sku = sku;
    bananas[_upc].upc = _upc;
    bananas[_upc].ownerID = msg.sender;
    bananas[_upc].originFarmerID = _originFarmerID;
    bananas[_upc].originFarmName = _originFarmName;
    bananas[_upc].originFarmInformation = _originFarmInformation;
    bananas[_upc].originFarmLatitude = _originFarmLatitude;
    bananas[_upc].originFarmLongitude = _originFarmLongitude;
    bananas[_upc].productID = _productID;
    bananas[_upc].productNotes = _productNotes;
    
    sku = sku + 1;

    emit Harvested(_upc);
  }

  function processBanana(uint _upc)
    public
    onlyFarmer
    harvested(_upc)
    verifyCaller(bananas[_upc].originFarmerID)
  {
    bananas[_upc].state = BananaState.Processed;

    emit Processed(_upc);
  }

  function boxBanana(uint _upc)
    public
    onlyFarmer
    processed(_upc)
    verifyCaller(bananas[_upc].originFarmerID)
  {
    bananas[_upc].state = BananaState.Boxed;

    emit Boxed(_upc);
  }

  function sellBananaBox(uint _upc, uint _price)
    public
    onlyFarmer
    boxed(_upc)
    verifyCaller(bananas[_upc].originFarmerID)  
  {
    bananas[_upc].state = BananaState.BoxForSale;
    bananas[_upc].productPrice = _price;

    emit BoxForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyBananaBox(uint _upc)
    public
    payable
    onlyDistributor
    boxForSale(_upc)
    paidEnough(bananas[_upc].productPrice)
    checkValueDistributor(_upc)
  {
    bananas[_upc].ownerID = msg.sender;
    bananas[_upc].distributorID = msg.sender;
    bananas[_upc].state = BananaState.Sold;
    
    payable(bananas[_upc].originFarmerID).transfer(bananas[_upc].productPrice);

    emit Sold(_upc);
  }

  function shipBananaBox(uint _upc)
    public 
    sold(_upc)
    verifyCaller(bananas[_upc].distributorID)
  {
    bananas[_upc].state = BananaState.Shipped;

    emit Shipped(_upc);
  }

  function receiveBananaBox(uint _upc)
    public 
    onlyRetailer
    shipped(_upc)
  {
    bananas[_upc].ownerID = msg.sender;
    bananas[_upc].retailerID = msg.sender;
    bananas[_upc].state = BananaState.Received;

    emit Received(_upc);
  }

  function unboxBanana(uint _upc)
    public
    onlyRetailer
    received(_upc)
  {
    bananas[_upc].state = BananaState.Unboxed;
    emit Unboxed(_upc);
  }

  function sellBanana(uint _upc)
    public
    onlyRetailer
    unboxed(_upc)
  {
    bananas[_upc].state = BananaState.ForSale;
    bananas[_upc].productPrice = bananas[_upc].productPrice + /* Fee */ 500000000000000000;

    emit ForSale(_upc);
  }

  function purchaseBanana(uint _upc)
    public 
    onlyConsumer
    forSale(_upc)
    paidEnough(bananas[_upc].productPrice)
    checkValue(_upc)
  {
    // Update the appropriate fields - ownerID, consumerID, itemState
    bananas[_upc].ownerID = msg.sender;
    bananas[_upc].consumerID = msg.sender;
    bananas[_upc].state = BananaState.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchBananaBufferOne(uint _upc) public view returns 
  (
    uint    bananaSKU,
    uint    bananaUPC,
    address ownerID,
    address originFarmerID,
    string memory originFarmName,
    string memory originFarmInformation,
    string memory originFarmLatitude,
    string memory originFarmLongitude
  ) 
  {
    // Assign values to the 8 parameters
    bananaSKU = bananas[_upc].sku;
    bananaUPC = bananas[_upc].upc;
    ownerID = bananas[_upc].ownerID;
    originFarmerID = bananas[_upc].originFarmerID;
    originFarmName = bananas[_upc].originFarmName;
    originFarmInformation = bananas[_upc].originFarmInformation;
    originFarmLatitude = bananas[_upc].originFarmLatitude;
    originFarmLongitude = bananas[_upc].originFarmLongitude;
    
    return 
    (
      bananaSKU,
      bananaUPC,
      ownerID,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchBananaBufferTwo(uint _upc) public view returns 
  (
    uint    bananaSKU,
    uint    bananaUPC,
    uint    productID,
    string memory productNotes,
    uint    productPrice,
    uint    state,
    address distributorID,
    address retailerID,
    address consumerID
  ) 
  {
    // Assign values to the 9 parameters
    bananaSKU = bananas[_upc].sku;
    bananaUPC = bananas[_upc].upc;
    productID = bananas[_upc].productID;
    productNotes = bananas[_upc].productNotes;
    productPrice = bananas[_upc].productPrice;
    state = uint(bananas[_upc].state);
    distributorID = bananas[_upc].distributorID;
    retailerID = bananas[_upc].retailerID;
    consumerID = bananas[_upc].consumerID;
    
    return 
    (
      bananaSKU,
      bananaUPC,
      productID,
      productNotes,
      productPrice,
      state,
      distributorID,
      retailerID,
      consumerID
    );
  }
}